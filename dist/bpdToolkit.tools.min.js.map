{"version":3,"sources":["webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/universalModuleDefinition","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/bootstrap","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/define property getters","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/hasOwnProperty shorthand","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/make namespace object","webpack://bpdToolkit.[name].bpdToolkit.[name]/./src/index.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","BPD_TOOLKIT_VERSION","isUndefined","val","isNull","is","typecheck","isEmpty","length","Array","isArray","are","attributes","c","i","sleep","timeout","Promise","resolve","setTimeout","clone","object","includes","assign","getRangeValue","min","max","isInRange","createElementFromString","htmlString","template","document","createElement","innerHTML","content","firstElementChild","parseJsonString","attribute","out","startsWith","endsWith","JSON","parse","jsonify","counter","idx","Counter","prefix","next","hasProperty","fName","hasFunction","enumerateObject","callback","reduceObject","initialValue","result","Debounce","delay","this","args","cancel","clearTimeout","Throttle","throttle","throttleTime","Error","id","e","console","log","throttleAsync","locked","reject","debounce","debounceTime","delayTime","promisify","insert","collection","index","t","splice","move","from","to","size","amount","el","newLength","newTo","generateGuid","S4","Math","random","toString","substring","options","getRandom","ceil","floor","excluded","round","limit","iteration","newIteration","openFullscreen","element","requestFullscreen","elementAny","webkitRequestFullscreen","msRequestFullscreen","closeFullscreen","exitFullscreen","anyDoc","webkitExitFullscreen","msExitFullscreen","isFullscreen","clientHeight","screen","availHeight","height","clientWidth","availWidth","width","Keeper","copy","shrink","push","entry","pop","len","diff"],"mappings":"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","file":"bpdToolkit.tools.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bpdToolkit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bpdToolkit\"] = factory();\n\telse\n\t\troot[\"bpdToolkit\"] = root[\"bpdToolkit\"] || {}, root[\"bpdToolkit\"][\"tools\"] = root[\"bpdToolkit\"][\"tools\"] || {}, root[\"bpdToolkit\"][\"tools\"][\"bpdToolkit\"] = root[\"bpdToolkit\"][\"tools\"][\"bpdToolkit\"] || {}, root[\"bpdToolkit\"][\"tools\"][\"bpdToolkit\"][\"tools\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const BPD_TOOLKIT_VERSION = \"1.0.0\";\r\n/**\r\n * Checks if value is undefined\r\n * @param val value\r\n */\r\nexport function isUndefined(val: any): boolean {\r\n    return typeof val === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if value is null\r\n * @param val value\r\n */\r\nexport function isNull(val: any): boolean {\r\n    return val === null;\r\n}\r\n\r\n\r\n/**\r\n * Checks if value is defined an is not null\r\n * Additionally with type check it can check value if it is not empty string or collection or object\r\n *\r\n * @param val - value\r\n * @param typecheck - default true - additional check whether value is not empty (string, collection, object)\r\n * @returns whether value passed all conditions\r\n */\r\nexport function is<T>(obj: T, typecheck: boolean = true): boolean {\r\n    if (!isUndefined(obj) && !isNull(obj)) {\r\n        if (!typecheck) {\r\n            return true;\r\n        } else {\r\n            return !isEmpty(obj)\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Checks if value is empty string, array or object\r\n *\r\n *\r\n * @param val - value\r\n * @returns whether value passed all conditions\r\n */\r\nexport function isEmpty<T>(val: T): boolean {\r\n    if (typeof val === \"string\") {\r\n        return val.length === 0\r\n    }\r\n    if (typeof val === \"boolean\") {\r\n        return val;\r\n    }\r\n    else if (Array.isArray(val)) {\r\n        return val.length === 0\r\n    }\r\n    return false\r\n}\r\n\r\n/**\r\n * Verifies whether attributes exist and have some values\r\n * @param attributes attributes list\r\n */\r\nexport function are(...attributes: any[]): boolean {\r\n    if (!is(attributes)) {\r\n        return false\r\n    }\r\n    let c = attributes.length;\r\n    for (let i = 0; i < c; i++) {\r\n        if (!is(attributes[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Gets promisified sleep function\r\n * @param timeout - timeout value in miliseconds\r\n */\r\nexport function sleep(timeout: number): Promise<boolean> {\r\n    return new Promise(resolve => setTimeout(() => {\r\n        resolve(true)\r\n    }, timeout));\r\n}\r\n\r\n\r\n/**\r\n * Clones an object\r\n * @param object object to clone\r\n */\r\nexport function clone(object: any): any {\r\n    if (!is(object)) {\r\n        return undefined;\r\n    }\r\n    let type = typeof object;\r\n    if ([\"number\", \"boolean\", \"string\"].includes(type)) {\r\n        return object;\r\n    }\r\n    if (Array.isArray(object)) {\r\n        return [...object]\r\n    }\r\n    return Object.assign({}, object);\r\n}\r\n\r\n\r\n/**\r\n * Gets value from range.\r\n * If value is in range then it is returned, if not then min or max is returned\r\n * @param value - value\r\n * @param min - range minimum\r\n * @param max - range maximum\r\n */\r\nexport function getRangeValue(value: number, min: number, max: number) {\r\n    if (value < min) {\r\n        return min;\r\n    } else if (value > max) {\r\n        return max;\r\n    }\r\n    return value;\r\n}\r\n\r\nexport function isInRange(value: number, min: number, max: number): boolean {\r\n    return is(value) && value >= min && value <= max;\r\n}\r\n\r\n/**\r\n * Creates proper html element from given string\r\n * @param htmlString - string containing html\r\n */\r\nexport function createElementFromString(htmlString: string): Element | null {\r\n    if (!is(htmlString)) {\r\n        return null;\r\n    }\r\n    let template = document.createElement('template')\r\n    template.innerHTML = htmlString\r\n    return template.content.firstElementChild;\r\n}\r\n\r\n/**\r\n * Creates object from JSON string\r\n* String must start with { and end with }\r\n *\r\n * @param attribute - attribute value\r\n * @returns object if string passes test, null otherwise\r\n */\r\n\r\nexport function parseJsonString(attribute: string): any | null {\r\n    let out = null;\r\n    if (is(attribute) && attribute.startsWith('{') && attribute.endsWith('}')) {\r\n        out = jsonify(attribute);\r\n        return out;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Number generator\r\n */\r\nexport function* counter(): Iterator<number> {\r\n    let idx = 0;\r\n    while (true) {\r\n        let reset = yield idx++;\r\n        if (reset || idx > 200000) {\r\n            idx = 0\r\n        }\r\n    }\r\n}\r\n\r\nexport function Counter(prefix?: string): () => string {\r\n    const c = counter();\r\n    return function () {\r\n        let next = c.next().value\r\n        return prefix ? prefix + next : \"\" + next;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether property exists\r\n * @param obj - object\r\n * @param fName - property name\r\n */\r\nexport function hasProperty(obj: any, fName: string) {\r\n    return is(obj) && is(obj[fName])\r\n}\r\n\r\n/**\r\n * Checks whether property exists on the object and it is a function\r\n * @param obj - object\r\n * @param fName - property name\r\n */\r\nexport function hasFunction(obj: any, fName: string) {\r\n    return is(obj[fName]) && typeof obj[fName] === 'function'\r\n}\r\n\r\n/**\r\n * Enumerate properties on the object an invokes callback for each one of them\r\n * @param object Object to enumarate\r\n * @param callback Callback to be invoked for each property\r\n */\r\nexport function enumerateObject(object: any, callback: (property: string, value: any) => void) {\r\n    if (!are(object, callback)) {\r\n        return;\r\n    }\r\n    for (let prop in object) {\r\n        if (object.hasOwnProperty(prop)) {\r\n            callback(prop, object[prop]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates new object from passed one by calling callback for each property. Result from callback is an input for next iteration\r\n * @param object - input object\r\n * @param callback - (currentResult, propertyName, propertyValue, currentIndex) - callback for execution\r\n * @param initialValue - initial value of a result object\r\n */\r\nexport function reduceObject<T>(object: any, callback: (current: T, prop: string, value: any, index: number) => T, initialValue: T): T {\r\n    if (!are(object, callback)) {\r\n        return initialValue;\r\n    }\r\n    let result = initialValue;\r\n    let counter = 0;\r\n    for (let prop in object) {\r\n        if (object.hasOwnProperty(prop)) {\r\n            result = callback(result, prop, object[prop], counter);\r\n            counter++;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates object from JSON string\r\n * @param attribute - JSON string\r\n */\r\nfunction jsonify(attribute: string): any {\r\n    return attribute && attribute.length > 0 ? JSON.parse(attribute) : {}\r\n}\r\n\r\n/**\r\n * Calls function after specific timeout.\r\n * If function is called again, timer resets\r\n */\r\nexport class Debounce {\r\n    #id: any;\r\n    #delay: number;\r\n    #callback: (...args: any[]) => void;\r\n    constructor(callback: (...args: any[]) => void, delay: number) {\r\n        this.#id = null;\r\n        this.#delay = delay;\r\n        this.#callback = callback;\r\n    }\r\n    /**\r\n     * Creates timeout ending with callback inokation, cancels current timeout\r\n     * @param args Function args\r\n     */\r\n    call(...args: any[]) {\r\n        this.cancel();\r\n        this.#id = setTimeout(() => {\r\n            this.#callback(...args);\r\n            this.#id = null;\r\n        }, this.#delay)\r\n    }\r\n\r\n    /**\r\n     * Cancels current callback invokation\r\n     */\r\n    cancel() {\r\n        if (this.#id) {\r\n            clearTimeout(this.#id);\r\n            this.#id = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Calls function after specific timeout.\r\n * If function is called again, timer resets\r\n */\r\nexport class Throttle {\r\n    #id: any;\r\n    #delay: number;\r\n    #callback: (...args: any[]) => void;\r\n    constructor(callback: (...args: any[]) => void, delay: number) {\r\n        this.#id = null;\r\n        this.#delay = delay;\r\n        this.#callback = callback;\r\n    }\r\n    /**\r\n     * Creates timeout ending with callback inokation, cancels current timeout\r\n     * @param args Function args\r\n     */\r\n    call(...args: any[]) {\r\n        if (this.#id === null) {\r\n            this.#callback(...args);\r\n            this.#id = setTimeout(() => {\r\n                this.#id = null;\r\n            }, this.#delay)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cancels current callback invokation\r\n     */\r\n    cancel() {\r\n        if (this.#id !== null) {\r\n            clearTimeout(this.#id);\r\n            this.#id = null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Creates new function that invokes orginal one but with time limit\r\n * Orignal callback will not be invoked more often every time specified in second argument\r\n * @param callback - callback to execute\r\n * @param throttleTime - time in ms during which callback cannot be executed\r\n * @returns cancellation funtion\r\n */\r\nexport function throttle(callback: (...args: any[]) => void, throttleTime: number) {\r\n    if (!are(throttleTime, callback)) {\r\n        throw new Error(\"[thorttle]: Incorrect throttle arguments\");\r\n    }\r\n    let id: any = null;\r\n    return function (...args: any[]) {\r\n        if (id === null) {\r\n            try {\r\n                callback(...args)\r\n                id = setTimeout(() => {\r\n                    id = null;\r\n                }, throttleTime)\r\n            } catch (e) {\r\n                id = null;\r\n                console.log(e);\r\n            }\r\n        }\r\n        return function () {\r\n            if (id !== null) {\r\n                clearTimeout(id);\r\n                id = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Block next callback executions until current finishes by returning an error if current is in progress\r\n * @param callback - callback to execute\r\n * @returns Promise that executes callback or throws error when is locked\r\n */\r\nexport function throttleAsync<T>(callback: (...args: any[]) => T): (...args: any[]) => Promise<T> {\r\n    if (!is(callback)) {\r\n        throw new Error(\"[throttleAsync]: Provided callback is incorrect\")\r\n    }\r\n    let locked = false;\r\n    return function (...args: any[]) {\r\n        if (!locked) {\r\n            locked = true;\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    resolve(callback(...args));\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    locked = false;\r\n                }\r\n            })\r\n        } else {\r\n            return new Promise((resolve, reject) => {\r\n                reject(new Error(\"Execution is currently locked\"))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* Debounce function - delays function execution by specfic time. Called again, break current execution and start new one\r\n * @param callback - callback to execute\r\n * @param debounceTime - time amount in ms that execution shall be delayed by\r\n * @returns cancellation function\r\n */\r\nexport function debounce(callback: (...args: any[]) => void, debounceTime: number) {\r\n    if (!are(callback, debounceTime)) {\r\n        throw new Error(\"[debounce]: Input arguments are not correct\")\r\n    }\r\n    let id: any = null;\r\n    return function (...args: any[]) {\r\n        if (id != null) {\r\n            clearTimeout(id)\r\n            id = null;\r\n        }\r\n        id = setTimeout(() => {\r\n            callback(...args)\r\n            id = null;\r\n        }, debounceTime)\r\n        return function () {\r\n            if (id !== null) {\r\n                clearTimeout(id);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Delays callback execution by specific time. Callback cannot be called again until previous execution finishes or was cancelled\r\n * @param callback - callback to execute\r\n * @param delayTime - time in ms that execution shall be delayed by\r\n * @returns Cancel callback\r\n */\r\nexport function delay(callback: (...args: any[]) => void, delayTime: number) {\r\n    if (!are(callback, delayTime)) {\r\n        throw new Error(\"[delay]: Input arguments are not correct\")\r\n    }\r\n    let id: any = null;\r\n    return function (...args: any[]) {\r\n        if (id === null) {\r\n            id = setTimeout(() => {\r\n                callback(...args);\r\n                id = null;\r\n            }, delayTime)\r\n        }\r\n        return function () {\r\n            if (id !== null) {\r\n                clearTimeout(id);\r\n                id = null;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates function that once invoked returns a promise that executes original callback\r\n * @param callback Callback to execute in promise\r\n */\r\nexport function promisify<T>(callback: (...args: any[]) => T): (...args: any[]) => Promise<T> {\r\n    if (!is(callback)) {\r\n        throw new Error(\"[promisify]: Callback is incorrect\")\r\n    }\r\n    return function (...args: any[]) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                resolve(callback(...args))\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Inserts new item to the collection at specific index. If index is lower than 0 then item is added at position 0, if index is bigger than collection size then item is added at the end\r\n * @param collection Collection of items\r\n * @param index position which new item should be added to - if undefined or null provided item will be inserted at last position\r\n * @param t new items to add\r\n * @returns Copy of the collection with new item inserted at specific position\r\n */\r\nexport function insert<T>(collection: T[], index: number, ...t: T[]): T[] {\r\n    if (!collection || collection === null || !t || t === null || t.length === 0) {\r\n        return collection;\r\n    }\r\n    let length = collection.length;\r\n    // If not provided then add then treat it like last\r\n    if (!index || index === 0 || index >= length) {\r\n        return [...collection, ...t];\r\n    }\r\n    if (index <= 0) {\r\n        return [...t, ...collection];\r\n    }\r\n    collection.splice(index, 0, ...t);\r\n    return [...collection]\r\n}\r\n\r\n/**\r\n * Moves element or number of elements starting from index to new index\r\n * @param collection - base collection\r\n * @param from - index from\r\n * @param to - index to\r\n * @param size - ?optional - amount of items to be moved\r\n */\r\nexport function move<T>(collection: T[], from: number, to: number, size?: number): T[] {\r\n    if (!collection || collection === null || from < 0) {\r\n        return collection;\r\n    }\r\n    let amount = size ?? 1;\r\n    let length = collection.length;\r\n    if (length < 2 || from >= length) {\r\n        return [...collection];\r\n    }\r\n    const el = collection.splice(from, amount);\r\n    const newLength = length - amount;\r\n    const newTo = to;\r\n    //let newIdx = newTo < 0 ? 0 : newTo > length - amount ? length - amount : newTo;\r\n    if (newTo <= 0) {\r\n        return [...el, ...collection];\r\n    }\r\n    if (newTo >= newLength) {\r\n        return [...collection, ...el];\r\n    }\r\n    collection.splice(newTo, 0, ...el)\r\n    return [...collection];\r\n}\r\n\r\n/**\r\n * Generates unique guid\r\n */\r\nexport function generateGuid(): string {\r\n    const S4 = function () {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\r\n}\r\n\r\nexport interface BpdRandomOptions {\r\n    min?: number;\r\n    max?: number;\r\n    excluded?: number[];\r\n    limit?: number;\r\n}\r\n\r\n/**\r\n * Generates random number from given min - max range with exclusion of items provided in options.\r\n * Method performs recursive operation when result doesn't pass condition - max step limit can be set in options (default is 10)\r\n * If result cannot be found after max recursion steps then error is thrown\r\n * Default for min is 0, for max is 1\r\n * @param options (BpdRandomOptions) - min, max, excluded (array), limit (recursion)\r\n * @returns random number\r\n * @example random({min: 1, max: 3, excluded: [1.2], limit: 10})\r\n */\r\nexport async function random(options?: BpdRandomOptions): Promise<number> {\r\n    const _min: number = Math.ceil(options?.min ?? 0);\r\n    const _max: number = Math.floor(options?.max ?? 1);\r\n    const _exc: number[] = options?.excluded ?? [];\r\n    const _limit: number = Math.round(options?.limit ?? 10);\r\n    return getRandom(_min, _max, _exc, 0, _limit);\r\n}\r\n\r\n/**\r\n * Method that generates random number\r\n * @param min range minimum\r\n * @param max range maximum\r\n * @param excluded exlcuded list\r\n * @param iteration iteration number\r\n * @param limit max iteration limit\r\n * @returns random number\r\n */\r\nfunction getRandom(min: number, max: number, excluded: number[], iteration: number, limit: number): number {\r\n    const result = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    // Positive ending\r\n    if (!excluded.includes(result)) {\r\n        return result;\r\n    }\r\n    const newIteration = iteration++;\r\n    if (newIteration >= limit) {\r\n        throw new Error(`Max recursive steps limit has been reached: ${limit}`)\r\n    }\r\n    return getRandom(min, max, excluded, newIteration, limit);\r\n\r\n}\r\n\r\n/**\r\n * Opens element in fullscreen if possible\r\n * @param element dom element. For full page use document.documentElement\r\n */\r\nexport async function openFullscreen(element: Element): Promise<boolean> {\r\n    if (element.requestFullscreen) {\r\n        await element.requestFullscreen();\r\n        return true;\r\n    }\r\n    let elementAny = element as any;\r\n    if (elementAny.webkitRequestFullscreen) { /* Safari */\r\n        await elementAny.webkitRequestFullscreen();\r\n        return true;\r\n    } else if (elementAny.msRequestFullscreen) { /* IE11 */\r\n        await elementAny.msRequestFullscreen();\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n/**\r\n * Closes fullscreen if possible\r\n */\r\nexport async function closeFullscreen(): Promise<boolean> {\r\n    if (document.exitFullscreen) {\r\n        await document.exitFullscreen();\r\n        return true;\r\n    }\r\n    let anyDoc = document as any;\r\n    if (anyDoc.webkitExitFullscreen) { /* Safari */\r\n        await anyDoc.webkitExitFullscreen();\r\n        return true;\r\n    } else if (anyDoc.msExitFullscreen) { /* IE11 */\r\n        await anyDoc.msExitFullscreen();\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isFullscreen(element: Element): boolean {\r\n    if (!is(element)) {\r\n        return false;\r\n    }\r\n    return element && element.clientHeight >= ((screen.availHeight || screen.height) - 30) && element.clientWidth >= ((screen.availWidth || screen.width) - 30)\r\n}\r\n\r\n\r\n/**\r\n * Stores number of historical elements, allows for undo and redo objects\r\n */\r\nexport class Keeper<T> {\r\n    #limit: number;\r\n    #undos: T[];\r\n    #redos: T[];\r\n    constructor(limit: number) {\r\n        this.#limit = limit;\r\n        this.#redos = [];\r\n        this.#undos = [];\r\n    }\r\n    /**\r\n     * Pushes element to undo list\r\n     * @param t - element\r\n     */\r\n    push(t: T) {\r\n        let copy = clone(t);\r\n        this.shrink();\r\n        this.#undos.push(copy);\r\n        this.#redos = [];\r\n    }\r\n\r\n    /**\r\n     * Gets latest element from undo list or undefined if list is empty\r\n     * @param t - current item to be pushed to redo list. If empty undoed element will be pushed\r\n     */\r\n    undo(t?: T): T | undefined {\r\n        if (this.#undos.length === 0) {\r\n            return undefined;\r\n        }\r\n        let copy = clone(t);\r\n        let entry = this.#undos.pop();\r\n        this.#redos.push(copy ?? entry);\r\n        return entry;\r\n    }\r\n\r\n    /**\r\n     * Gets latest element from redo list or undefined if list is empty\r\n     */\r\n    redo(): T | undefined {\r\n        if (this.#redos.length === 0) {\r\n            return undefined;\r\n        }\r\n        return this.#redos.pop();\r\n    }\r\n\r\n    /**\r\n     * Shrinks down undos array to size of limit - 1\r\n     * Removes oldest entries (starting from index of 0)\r\n     */\r\n    shrink(): void {\r\n        let len = this.#undos.length;\r\n        if (this.#undos.length >= this.#limit) {\r\n            let diff = len - this.#limit + 1;\r\n            this.#undos.splice(0, diff);\r\n        }\r\n    }\r\n}"],"sourceRoot":""}