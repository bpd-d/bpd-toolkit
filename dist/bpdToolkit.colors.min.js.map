{"version":3,"sources":["webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/universalModuleDefinition","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/bootstrap","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/define property getters","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/hasOwnProperty shorthand","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/make namespace object","webpack://bpdToolkit.[name].bpdToolkit.[name]/./src/colors.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","hexToRgb","hex","start","includes","rgbArray","Array","i","fromHex","substr","validateRgb","red","green","blue","hslToRgb","hslColor","validateHsl","t2","sat","saturation","light","lightness","hue","t1","Math","round","hueToRgb","rgbToHsl","rgbColor","maxcolor","rgb","min","max","nextIdx","colorIndex","Error","getHueOnRed","getHueOnGreen","getHueOnBlue","isNaN","getHue","getSaturation","between0and255","between","toHex","toString","length","parseInt","toHslString","toRgbString","toRgbaString","rgbaColor","alpha","toHexString","toHexaString"],"mappings":"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","file":"bpdToolkit.colors.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bpdToolkit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bpdToolkit\"] = factory();\n\telse\n\t\troot[\"bpdToolkit\"] = root[\"bpdToolkit\"] || {}, root[\"bpdToolkit\"][\"colors\"] = root[\"bpdToolkit\"][\"colors\"] || {}, root[\"bpdToolkit\"][\"colors\"][\"bpdToolkit\"] = root[\"bpdToolkit\"][\"colors\"][\"bpdToolkit\"] || {}, root[\"bpdToolkit\"][\"colors\"][\"bpdToolkit\"][\"colors\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Methods implementation borrowed from W3School color converter implementation\r\n */\r\n\r\n\r\n/**\r\n * Interfaces\r\n */\r\n\r\nexport interface RgbColor {\r\n    red: number;\r\n    green: number;\r\n    blue: number;\r\n}\r\n\r\nexport interface RgbaColor extends RgbColor {\r\n    alpha: number;\r\n}\r\n\r\nexport interface HslColor {\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number;\r\n}\r\n\r\n/**\r\n * Converters \r\n */\r\n\r\n/**\r\n * Converts hex color string to RGB color object\r\n * @param hex string w/o # character\r\n * @returns RGB color\r\n */\r\n\r\nexport function hexToRgb(hex: string): RgbColor | undefined {\r\n    let start = hex.includes('#') ? 1 : 0;\r\n    const rgbArray = new Array(3);\r\n    for (let i = 0; i < 3; i++) {\r\n        rgbArray[i] = fromHex(hex.substr(start + i * 2, 2));\r\n    }\r\n\r\n    return validateRgb({\r\n        red: rgbArray[0],\r\n        green: rgbArray[1],\r\n        blue: rgbArray[2]\r\n    })\r\n}\r\n\r\n/**\r\n * Converts HSL color scheme to RGB color sheme\r\n * @param hslColor \r\n * @returns RGB color object\r\n */\r\nexport function hslToRgb(hslColor: HslColor): RgbColor | undefined {\r\n    if (!validateHsl(hslColor)) {\r\n        return undefined;\r\n    }\r\n    let t2;\r\n    const sat = hslColor.saturation;\r\n    const light = hslColor.lightness;\r\n    const hue = hslColor.hue / 60;\r\n    if (light <= 0.5) {\r\n        t2 = light * (sat + 1);\r\n    } else {\r\n        t2 = light + sat - (light * sat);\r\n    }\r\n    const t1 = light * 2 - t2;\r\n    return validateRgb({\r\n        red: Math.round(hueToRgb(t1, t2, hue + 2) * 255),\r\n        green: Math.round(hueToRgb(t1, t2, hue) * 255),\r\n        blue: Math.round(hueToRgb(t1, t2, hue - 2) * 255)\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Converts RGB color to HSL color\r\n * @param rgbColor RGB color\r\n * @returns HSL color object\r\n */\r\nexport function rgbToHsl(rgbColor: RgbColor): HslColor | undefined {\r\n    if (!validateRgb(rgbColor)) {\r\n        return undefined;\r\n    }\r\n    let maxcolor = 0;\r\n    const rgb = new Array(\r\n        rgbColor.red / 255,\r\n        rgbColor.green / 255,\r\n        rgbColor.blue / 255\r\n    );\r\n\r\n    let min = rgb[0];\r\n    let max = rgb[0];\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n        let nextIdx = i + 1;\r\n        if (rgb[nextIdx] <= min) { min = rgb[nextIdx]; }\r\n        if (rgb[nextIdx] >= max) { max = rgb[nextIdx]; maxcolor = nextIdx; }\r\n    }\r\n\r\n    const hue = getHue(rgb, min, max, maxcolor);\r\n    const light = (min + max) / 2;\r\n    const saturation = getSaturation(min, max, light);\r\n    return validateHsl({\r\n        hue: Math.round(hue),\r\n        saturation: Math.round(saturation * 100) / 100,\r\n        lightness: Math.round(light * 100) / 100\r\n    });\r\n}\r\n\r\n/** \r\n * Helpers\r\n*/\r\nfunction validateRgb(rgbColor: RgbColor): RgbColor | undefined {\r\n    if (between0and255(rgbColor.red) && between0and255(rgbColor.green) && between0and255(rgbColor.blue)) {\r\n        return rgbColor;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction validateHsl(hslColor: HslColor): HslColor | undefined {\r\n    if (between(hslColor.hue, 0, 360) &&\r\n        between(hslColor.saturation, 0, 1) &&\r\n        between(hslColor.lightness, 0, 1)) {\r\n        return hslColor;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction between(value: number, min: number, max: number): boolean {\r\n    return value >= min && value <= max;\r\n}\r\n\r\nfunction between0and255(value: number): boolean {\r\n    return between(value, 0, 255);\r\n}\r\n\r\nfunction getHue(rgbArray: number[], min: number, max: number, colorIndex: number): number {\r\n    if (colorIndex > 2 || colorIndex < 0) {\r\n        throw new Error(\"Incorrect color index\");\r\n    }\r\n    let callbacks = new Array(getHueOnRed, getHueOnGreen, getHueOnBlue)\r\n    let hue = callbacks[colorIndex](rgbArray, min, max);\r\n\r\n    if (isNaN(hue)) {\r\n        return 0;\r\n    }\r\n    hue = hue * 60;\r\n    if (hue < 0) {\r\n        return hue + 360;\r\n    }\r\n    return hue;\r\n}\r\n\r\nfunction getHueOnRed(rgbArray: number[], min: number, max: number): number {\r\n    return (rgbArray[1] - rgbArray[2]) / (max - min);\r\n}\r\n\r\nfunction getHueOnGreen(rgbArray: number[], min: number, max: number): number {\r\n    return 2 + (rgbArray[2] - rgbArray[0]) / (max - min);\r\n}\r\n\r\nfunction getHueOnBlue(rgbArray: number[], min: number, max: number): number {\r\n    return 4 + (rgbArray[0] - rgbArray[1]) / (max - min);\r\n}\r\n\r\n/**\r\n * Helper for rgbToHsl function which calculates saturation\r\n * @param min minimal color value\r\n * @param max \r\n * @param lightness \r\n */\r\nfunction getSaturation(min: number, max: number, lightness: number) {\r\n    if (min == max) {\r\n        return 0;\r\n    }\r\n    if (lightness < 0.5) {\r\n        return (max - min) / (max + min);\r\n    }\r\n    return (max - min) / (2 - max - min);\r\n}\r\n\r\n/**\r\n * Helper for \"hslToRgb\" to calculate color value\r\n * @param t1 \r\n * @param t2 \r\n * @param hue \r\n * @returns color value 0 - 255\r\n */\r\nfunction hueToRgb(t1: number, t2: number, hue: number): number {\r\n    if (hue < 0) hue += 6;\r\n    if (hue >= 6) hue -= 6;\r\n    if (hue < 1) return (t2 - t1) * hue + t1;\r\n    else if (hue < 3) return t2;\r\n    else if (hue < 4) return (t2 - t1) * (4 - hue) + t1;\r\n    else return t1;\r\n}\r\n\r\n/**\r\n * Converts numeric value to hex string\r\n * @param value numeric value\r\n * @returns hex string\r\n */\r\nexport function toHex(value: number): string {\r\n    let hex = value.toString(16);\r\n    while (hex.length < 2) { hex = \"0\" + hex; }\r\n    return hex;\r\n}\r\n\r\n\r\n/**\r\n * Converts hex string to numeric value;\r\n * @param hex \r\n * @returns \r\n */\r\nexport function fromHex(hex: string): number {\r\n    return parseInt(hex, 16);\r\n}\r\n\r\n/**\r\n * To notation\r\n */\r\n\r\n/**\r\n * Creates HSL string from object hsl(x, y%, z%)\r\n * @param hslColor color object\r\n * @returns HSL string\r\n */\r\nexport function toHslString(hslColor: HslColor) {\r\n    return `hsl(${hslColor.hue},${hslColor.saturation * 100}%,${hslColor.lightness * 100}%)`;\r\n}\r\n\r\n/**\r\n * Creates RGB string from object rgb(x, y, z)\r\n * @param rgbColor color object\r\n * @returns RGB string\r\n */\r\nexport function toRgbString(rgbColor: RgbColor) {\r\n    return `rgb(${rgbColor.red},${rgbColor.green},${rgbColor.blue})`;\r\n}\r\n\r\n/**\r\n * Creates RGBa string from object rgba(x, y, z, a)\r\n * @param rgbaColor color object\r\n * @returns RGBa string\r\n */\r\nexport function toRgbaString(rgbaColor: RgbaColor) {\r\n    return `rgba(${rgbaColor.red},${rgbaColor.green},${rgbaColor.blue},${rgbaColor.alpha})`;\r\n}\r\n\r\n/**\r\n * Creates HEX string from rgb object #XXYYZZ\r\n * @param rgbColor color object\r\n * @returns HEx string\r\n */\r\nexport function toHexString(rgbColor: RgbColor) {\r\n    return `#${toHex(rgbColor.red)}${toHex(rgbColor.green)}${toHex(rgbColor.blue)}`;\r\n}\r\n\r\n/**\r\n * Creates HEXa string from rgb object #XXYYZZAA\r\n * @param rgbaColor color object\r\n * @returns HEXa string\r\n */\r\nexport function toHexaString(rgbaColor: RgbaColor) {\r\n    return toHexString(rgbaColor) + toHex(rgbaColor.alpha * 255);\r\n}\r\n\r\n"],"sourceRoot":""}