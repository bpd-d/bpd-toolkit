{"version":3,"sources":["webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/universalModuleDefinition","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/bootstrap","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/define property getters","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/hasOwnProperty shorthand","webpack://bpdToolkit.[name].bpdToolkit.[name]/webpack/runtime/make namespace object","webpack://bpdToolkit.[name].bpdToolkit.[name]/./src/location.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","LocationError","Error","code","message","super","this","errorCode","setPrototypeOf","getLocation","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","error","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,aAAc,GAAIH,GACC,iBAAZC,QACdA,QAAoB,WAAID,KAExBD,EAAiB,WAAIA,EAAiB,YAAK,GAAIA,EAAiB,WAAY,SAAIA,EAAiB,WAAY,UAAK,GAAIA,EAAiB,WAAY,SAAc,WAAIA,EAAiB,WAAY,SAAc,YAAK,GAAIA,EAAiB,WAAY,SAAc,WAAY,SAAIC,KARtR,CASGK,MAAM,WACT,M,mBCTA,IAAIC,EAAsB,CCA1B,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBd,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,M,uDCkBhD,MAAMC,UAAsBC,MAE/B,YAAYC,EAAcC,GACtBC,MAAMD,GACNE,KAAKC,UAAYJ,EACjBd,OAAOmB,eAAeF,KAAML,EAAcN,YAUnC,SAASc,EAAYC,GAChC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAuBrBC,UAAUC,YACVD,UAAUC,YAAYC,oBAtB1B,SAA2BC,GACvBL,EAAQK,MAGZ,SAAyBC,GACrB,OAAQA,EAAMf,MACV,KAAKe,EAAMC,kBACPN,EAAO,IAAIZ,EAAc,oBAAqB,+BAC9C,MACJ,KAAKiB,EAAME,qBACPP,EAAO,IAAIZ,EAAc,uBAAwB,4BACjD,MACJ,KAAKiB,EAAMG,QACPR,EAAO,IAAIZ,EAAc,UAAW,sCACpC,MACJ,QACIY,EAAO,IAAIZ,EAAc,gBAAiB,yCAM2BS,GAE7EG,EAAO,IAAIZ,EAAc,YAAa,kC","file":"bpdToolkit.location.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bpdToolkit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bpdToolkit\"] = factory();\n\telse\n\t\troot[\"bpdToolkit\"] = root[\"bpdToolkit\"] || {}, root[\"bpdToolkit\"][\"location\"] = root[\"bpdToolkit\"][\"location\"] || {}, root[\"bpdToolkit\"][\"location\"][\"bpdToolkit\"] = root[\"bpdToolkit\"][\"location\"][\"bpdToolkit\"] || {}, root[\"bpdToolkit\"][\"location\"][\"bpdToolkit\"][\"location\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export interface GeolocationCoordinates {\r\n    readonly accuracy: number;\r\n    readonly altitude: number | null;\r\n    readonly altitudeAccuracy: number | null;\r\n    readonly heading: number | null;\r\n    readonly latitude: number;\r\n    readonly longitude: number;\r\n    readonly speed: number | null;\r\n}\r\n\r\nexport interface GeolocationPosition {\r\n    readonly coords: GeolocationCoordinates;\r\n    readonly timestamp: number;\r\n}\r\n\r\nexport interface GeolocationPositionError {\r\n    readonly code: number;\r\n    readonly message: string;\r\n    readonly PERMISSION_DENIED: number;\r\n    readonly POSITION_UNAVAILABLE: number;\r\n    readonly TIMEOUT: number;\r\n}\r\n\r\nexport class LocationError extends Error {\r\n    errorCode: string;\r\n    constructor(code: string, message: string) {\r\n        super(message);\r\n        this.errorCode = code;\r\n        Object.setPrototypeOf(this, LocationError.prototype);\r\n    }\r\n}\r\n\r\n/**\r\n * Promisified function that obtains geolocation coordinates or throws an error if it is not possible.\r\n * Function uses native geolocation API.\r\n * @param options - PositionOptions (MDN) - position options\r\n * @returns Promise that resolves with GeolocationPosition object \r\n */\r\nexport default function getLocation(options?: PositionOptions): Promise<GeolocationPosition> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        function onLocationAcquire(location: GeolocationPosition) {\r\n            resolve(location);\r\n        }\r\n\r\n        function onLocationError(error: GeolocationPositionError) {\r\n            switch (error.code) {\r\n                case error.PERMISSION_DENIED:\r\n                    reject(new LocationError(\"PERMISSION_DENIED\", \"Geolocation service denied\"));\r\n                    break;\r\n                case error.POSITION_UNAVAILABLE:\r\n                    reject(new LocationError(\"POSITION_UNAVAILABLE\", \"Position is unavailable\"));\r\n                    break;\r\n                case error.TIMEOUT:\r\n                    reject(new LocationError(\"TIMEOUT\", \"Geolocation service has timed out\"));\r\n                    break;\r\n                default:\r\n                    reject(new LocationError(\"UNKNOWN_ERROR\", \"Geolocation service general error\"));\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(onLocationAcquire, onLocationError, options);\r\n        } else {\r\n            reject(new LocationError(\"API_ERROR\", \"Location API not available\"))\r\n        }\r\n    })\r\n}"],"sourceRoot":""}